                                     START


                      Step One: Get the Authorization Code

 The first step in an OAuth2 authorization process is normally a manual one.

 Before Intellinote can allow our application to access Intellinote on the
 user's behalf, the user must explicitly "grant" our application access to
 his or her account.

 The process works like this:

 1. We will direct the user to a special URL at Intellinote.

 2. Intellinote will ask the user to log in (if he hasn't already) and to
    approve our application's access (if he hasn't already).

 3. Once the user has been authenticated and authorized our application to
    act on his behalf, Intellinote will redirect the user back to our site
    (to a URL we specify) with a special authorization code value appended
    to the URL as a query string parameter.

    This authorization code is our proof that the user granted access to
    our application.

 Later, our application will be able to trade that authorization code for an
 access token that will act as our application's credential when accessing
 Intellinote for that user. (That step is described in more detail below.)

 Typically this is a one-time action. Once the user has granted access, our
 application will be able to obtain new access tokens without direct action
 on the user's part -- the user doesn't even need to be online.

 For the purpose of this demonstration, we will pretend to be the end-user's
 web browser and complete this step programmatically, but in practice we
 won't have to worry about this step. We'll just send the user to Intellinote
 and wait for him to come back with an authorization code.

Enabling cookies since we're pretending to act as the end-user's browser.
 Done.

Logging in as user "rod.<REDACTED>.net".
 REQUEST
    Requesting: POST /log-in
   Body (Form): {
                  "username": "rod.<REDACTED>.net",
                  "password": "<REDACTED>"
                }
 RESPONSE
   Status Code: 302
        Header: Location: /api/rest/

 Logged in.

Requesting authorization code from "rod.<REDACTED>.net"
for scope "read,write".
 REQUEST
    Requesting: GET /auth/oauth2/authorization?response_type=code&client_id=ei06n5poF0n6COmn&scope=read,write&redirect_uri=/
 RESPONSE
   Status Code: 302
        Header: Location: /?code=zmy739bnk6vtpgb9

 Got a 302 response to request for an authorization code.
 The user must have already granted access.
 Found authorization code "zmy739bnk6vtpgb9".


                         Step Two: Get an Access Token

 Now that we have an authorization code that certifies that the end-user has
 authorized our application to access his or her account, we can exchange it
 for an access token that we'll include in our actual API calls.

 To get the access token, we submit a POST request to Intellinote, including:
   - the authorization code
   - our client id (as assigned by Intellinote)
   - our client secret (as assigned by Intellinote)
   - the value grant_type=authorization_code
 in a JSON document within the request body.

 If all goes well, Intellinote will respond with a JSON document that contains
 our access token.

 An access token acts as a type of credential. When we include it within the
 HTTP request header named "Authorization", Intellinote will allow our
 application to execute an API method on behalf of the user.

 An access token is a temporary credential. It will eventually become "stale".
 When that happens, Intellinote will start to return an HTTP 401 (Unauthorized)
 response to our API calls. When this happens we can request a new access token
 using a refresh token that will also be returned by this call.

 (The use of the refresh token is described in detail below.)

Disabling cookies since we're done pretending to act as the end-user's browser.
 Done. From now on all calls are server-to-server calls without cookies.

Requesting access token and refresh token using code "zmy739bnk6vtpgb9".
 REQUEST
    Requesting: POST /auth/oauth2/access
   Body (JSON): {
                  "code": "zmy739bnk6vtpgb9",
                  "client_id": "ei06n5poF0n6COmn",
                  "client_secret": "<REDACTED>",
                  "grant_type": "authorization_code"
                }
 RESPONSE
   Status Code: 200
   Body (JSON): {
                  "refresh_token": "43vee5p0ouipy14iuz6uvemndf1xajor",
                  "access_token": "889trp724o9od2t9j75o7tbtxc6ry66r",
                  "token_type": "bearer"
                }

 Done.
 Found access_token "889trp724o9od2t9j75o7tbtxc6ry66r".
 Found refresh_token "43vee5p0ouipy14iuz6uvemndf1xajor".


                        Step Three: Use the Access Token

 Now that we have an access token, we simply need to include it in our API
 calls within the Authorization request header, like this:

     Authorization: Bearer <ACCESS TOKEN VALUE>

 Intellinote will use this value to determine:
   - which application is making the call, and
   - which user's data the application is trying to access.

Setting Authorization Header
 Setting Authorization header to "Bearer 889trp724o9od2t9j75o7tbtxc6ry66r"
 for all subsequent requests.
 Done.

Using the access token to invoke API methods.
 REQUEST
    Requesting: GET /v2.0/orgs
        Header: Authorization: Bearer 889trp724o9od2t9j75o7tbtxc6ry66r
 RESPONSE
   Status Code: 200
   Body (JSON): [
                  {
                    "org_id": 5,
                    "name": "Rod-Sandbox's Organization"
                  }
                ]

 Found org_id "5".
 Done.

                            Refresh the Access Token

 As mentioned above, our access token will eventually expire and stop working.
 When this happens we can use our refresh token to obtain a new one.

 The refresh call is very similar to the call that used the authorization code
 to obtain the initial access and refresh tokens.

 To refresh the access token, we submit a POST request to Intellinote, including:
   - the refresh token
   - our client id (as assigned by Intellinote)
   - our client secret (as assigned by Intellinote)
   - the value grant_type=refresh_token
 in a JSON document within the request body.

 If all goes well, Intellinote will respond with a JSON document that contains
 our new access token.

 Intellinote may also return a new refresh token value. If it does, we should
 use this new refresh token the next time we want to refresh the access token.

Clearing access_token to pretend as if the access token has expired.
 Done.

Requesting a NEW access token using the refresh token
"43vee5p0ouipy14iuz6uvemndf1xajor".
 REQUEST
    Requesting: POST /auth/oauth2/access
   Body (JSON): {
                  "refresh_token": "43vee5p0ouipy14iuz6uvemndf1xajor",
                  "client_id": "ei06n5poF0n6COmn",
                  "client_secret": "<REDACTED>",
                  "grant_type": "refresh_token"
                }
 RESPONSE
   Status Code: 200
   Body (JSON): {
                  "access_token": "6fh9htj33d0wcdinzz37i5t7ali8uxr3",
                  "refresh_token": "43vee5p0ouipy14iuz6uvemndf1xajor"
                }

 Done.
 Found NEW access_token "6fh9htj33d0wcdinzz37i5t7ali8uxr3".
 Found refresh_token "43vee5p0ouipy14iuz6uvemndf1xajor".

Setting Authorization Header
 Setting Authorization header to "Bearer 6fh9htj33d0wcdinzz37i5t7ali8uxr3"
 for all subsequent requests.
 Done.

                            Use the NEW Access Token

Using NEW access code to invoke API.
 REQUEST
    Requesting: GET /v2.0/org/5/workspaces
        Header: Authorization: Bearer 6fh9htj33d0wcdinzz37i5t7ali8uxr3
 RESPONSE
   Status Code: 200
   Body (JSON): [
                  {
                    "workspace_id": 4,
                    "name": "Personal Workspace"
                  }
                ]

 Found workspace_id "5".
 Done.
Using NEW access code to invoke API again.
 REQUEST
    Requesting: GET /v2.0/org/5/workspace/4/notes
        Header: Authorization: Bearer 6fh9htj33d0wcdinzz37i5t7ali8uxr3
 RESPONSE
   Status Code: 200
   Body (JSON): [
                  {
                    "note_id": 4,
                    "note_type": "NOTE",
                    "title": "Welcome to your first note in Intellinote!",
                    "viewed": true,
                    "state": "ACTIVE",
                    "creator": {
                      "user_id": "user2",
                      "given_name": "Rod-Sandbox",
                      "family_name": "Smith"
                    },
                    "workspace": {
                      "workspace_id": 4,
                      "name": "Personal Workspace"
                    },
                    "tags": [
                      {
                        "tag_id": 4,
                        "label": "GettingStarted",
                        "LABEL": "GETTINGSTARTED"
                      }
                    ]
                  }
                ]

 Done.



 ALL DONE.

                                      END
